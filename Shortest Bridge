class Solution {
public:
    vector<pair<int,int>> first,second;
    void dfs(int i,int j,int c,vector<vector<int>>& grid)
    {
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]!=1)
        return;

        grid[i][j] = c;
        if(c==2)
        {
            first.push_back({i,j});
        }
        else
        second.push_back({i,j});


        dfs(i-1,j,c,grid);
        dfs(i+1,j,c,grid);
        dfs(i,j+1,c,grid);
        dfs(i,j-1,c,grid);
        
    }
    int shortestBridge(vector<vector<int>>& grid) {
        int c= 2;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                if(grid[i][j] == 1)
                {
                    dfs(i,j,c,grid);
                    c++;
                }
            }
        }
        int ans = INT_MAX;
        for(int i=0;i<first.size();i++)
        {
            for(int j=0;j<second.size();j++)
            {
                ans = min(abs(first[i].first - second[j].first)+abs(first[i].second-second[j].second)-1,ans);
            }
        }
        return ans;
    }
};
