"""
Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.

"""


class Solution:
    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:
        l = []
        m = 0
        potions.sort()
        for i in spells:
            s = 0
            e = len(potions)-1
            while s<=e:
                m = (s+e)//2
                ans = i*potions[m]
                if ans < success:
                    s = m+1
                elif ans >=success:
                    e = m-1
                
            l.append(len(potions)-e-1)
        return l
