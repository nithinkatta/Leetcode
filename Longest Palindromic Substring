class Solution:
    def longestPalindrome(self, s: str) -> str:
        # if len(s)==1:
        #     return 1
        # if len(set(s))==len(s):
        #     return 1

        # def fun(s,l):
        #     print(s)
        #     a = b = 0
        #     if len(s)==1:
        #         return 0
        #     if s == s[::-1]:
        #         return len(s)
        #     if len(s)==0:
        #         return -1
            
        #     # print(s[0],s[len(s)-1])
        #     if s[0] == s[len(s)-1]:
        #         l+=2
        #         # print(s[1:len(s)-1])
        #         return fun(s[1:len(s)-1],l)
        #     else:
        #         print(2)
        #         a = fun(s[1: ],l)
        #         b = fun(s[:len(s)-1],l)
            
        #     return l+max(a,b)


        # return fun(s,0)


        c = {}
        def dfs(i,j):
            if i<0 or j==len(s):
                return 0
            
            if (i,j) in c:
                return c[(i,j)]
            
            if s[i] == s[j]:
                l = 1 if i==j else 2
                c[(i,j)] = l + dfs(i-1,j+1)
            else:
                c[(i,j)] = max(dfs(i-1,j),dfs(i,j+1))
            return c[(i,j)]
        for i in range(len(s)):
            dfs(i,i)
            dfs(i,i+1)
        return max(c)

        
